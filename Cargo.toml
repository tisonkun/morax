# Copyright 2024 tison <wander4096@gmail.com>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

[workspace]
members = [
  "api/kafka-api",
  "api/protos",
  "api/wal-client",
  "cmd/morax",
  "crates/kafka-broker",
  "crates/meta",
  "crates/runtime",
  "crates/server",
  "crates/storage",
  "crates/telemetry",
  "crates/version",
  "crates/wal-broker",
  "tests/rdkafka",
  "tests/rskafka",
  "tests/toolkit",
  "tests/wal",
  "xtask",
]

resolver = "2"

[workspace.package]
authors = ["tison <wander4096@gmail.com>"]
edition = "2021"
license = "Apache-2.0"
readme = "README.md"
repository = "https://github.com/tisonkun/morax/"
version = "0.1.0"

[workspace.dependencies]
backon = { version = "1.2", features = ["tokio-sleep"] }
base64 = { version = "0.22" }
better-panic = { version = "0.3" }
build-data = { version = "0.2" }
byteorder = { version = "1.5" }
clap = { version = "4.5", features = ["derive"] }
const_format = { version = "0.2" }
ctrlc = { version = "3.4" }
error-stack = { version = "0.5" }
fastrace = { version = "0.7", features = ["enable"] }
flexbuffers = { version = "2.0" }
futures = { version = "0.3" }
gix-discover = { version = "0.36" }
insta = { version = "1.40", features = ["json"] }
local-ip-address = { version = "0.6" }
log = { version = "0.4", features = ["kv_unstable_serde", "serde"] }
logforth = { version = "0.14" }
mea = { version = "0.0.3" }
mime = { version = "0.3" }
opendal = { version = "0.50" }
pin-project = { version = "1.1" }
poem = { version = "3.1", features = ["compression", "rustls"] }
regex = { version = "1.11" }
reqwest = { version = "0.12", features = ["json", "rustls-tls"] }
scopeguard = { version = "1.2" }
serde = { version = "1.0", features = ["derive"] }
serde_json = { version = "1.0" }
shadow-rs = { version = "0.35.1" }
sqlx = { version = "0.8", features = [
  "json",
  "postgres",
  "runtime-tokio-rustls",
  "uuid",
] }
tempfile = { version = "3.13" }
test-harness = { version = "0.3" }
testcontainers = { version = "0.23", features = ["blocking"] }
thiserror = { version = "1.0" }
tokio = { version = "1.41", features = ["full"] }
tokio-util = { version = "0.7", features = ["compat"] }
toml = { version = "0.8" }
url = { version = "2.5" }
uuid = { version = "1.11", features = ["v4"] }
which = { version = "6.0" }

# workspace dependencies
kafka-api = { version = "0.4.1", path = "api/kafka-api" }
morax-kafka-broker = { version = "0.1.0", path = "crates/kafka-broker" }
morax-meta = { version = "0.1.0", path = "crates/meta" }
morax-protos = { version = "0.1.0", path = "api/protos" }
morax-runtime = { version = "0.1.0", path = "crates/runtime" }
morax-server = { version = "0.1.0", path = "crates/server" }
morax-storage = { version = "0.1.0", path = "crates/storage" }
morax-telemetry = { version = "0.1.0", path = "crates/telemetry" }
morax-version = { version = "0.1.0", path = "crates/version" }
morax-wal-broker = { version = "0.1.0", path = "crates/wal-broker" }
morax-wal-client = { version = "0.1.0", path = "api/wal-client" }
tests-toolkit = { version = "0.1.0", path = "tests/toolkit" }

[workspace.lints.rust]
unknown_lints = "deny"
unsafe_code = "deny"

[workspace.lints.clippy]
dbg_macro = "deny"

[workspace.metadata.release]
pre-release-commit-message = "chore: release v{{version}}"
shared-version = true
sign-tag = true
tag-name = "v{{version}}"

# Config for 'cargo dist'
[workspace.metadata.dist]
# The preferred cargo-dist version to use in CI (Cargo.toml SemVer syntax)
cargo-dist-version = "0.22.1"
# CI backends to support
ci = "github"
# Path that installers should place binaries in
install-path = "CARGO_HOME"
# Whether to install an updater program
install-updater = false
# The installers to generate for each app
installers = ["shell"]
# Which actions to run on pull requests
pr-run-mode = "plan"
# Target platforms to build apps for (Rust target-triple syntax)
targets = [
  "aarch64-apple-darwin",
  "x86_64-apple-darwin",
  "x86_64-unknown-linux-gnu",
  "x86_64-pc-windows-msvc",
]

[profile.dist]
inherits = "release"
lto = "thin"
